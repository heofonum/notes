1 create folder as the workspace of go

    1 $ cd $HOME/go
    2 $ mkdir bin pkg src
    3 export GOPATH=go
      export PATH=$PATH:$GOPATH/bin

tips:

    1 src contains Go source files organized into packages(one package per directory)
    2 pkg contains package objects
    3 bin contains executeable commands

    the go tool builds source packages and installs the resulting binaries to the pkg and bin dicectories

    the sec subdirectory typically contains multiple version control repositories(such as Git or Mercurial) that track the development of one or moew souce packages

    example:

        bin/
            hello    # command executable
            outyet   # command executable
        pkg/
            darwin_amd64/
                github.com/user/example/
                    stringutil.a # package object
        src/
            github.com/user/example/
                .git/               # Git repository metadata
                hello/
                    hello.go        # command source
                outyet/
                    main.go         # command source
                    main_test.go    # test source
                stringutil/
                    reverse.go      # package source
                    reverse_test.go # test source

        this workspace contains one repository(example) comprising two commands(hello and outyet) and one library(stringutil)

2 program

    1 $ mkdir $GOPATH/src/github.com/user/hello
    2 $ vim hello.go
      
      package main

      import "fmt"

      func main() {
          fmt.Printf("Hello, world.\n")
      }

    3 $ go install github.com/user/hello

      you can run this cmd from anywhere on your system. the go tool finds the source code by looking for the github.com/user/hello package inside the workspace specified by GOPATH

      or

      $ cd $GOPATH/src/github.com/user/hello
      $ go install

      this cmd builds the hello cmd, producing an executable binary. it then installs that binary to the workspace's bin directory as hello.

    4 $ hello
      Hello, world.

    5 if you're using a source control system, now would be a good time to initialize a repository, add the files, and commit your first change. this step is optional.

      $ cd $GOPATH/src/github.com/user/hello
      $ git init
      Initialized empty Git repository in /home/user/go/src/github.com/user/hello/.git/
      $ git add hello.go
      $ git commit -m "initial commit"
      [master (root-commit) 0b4507d] initial commit
       1 file changed, 1 insertion(+)
        create mode 100644 hello.go

3 library
    
    1 $ mkdir $GOPATH/src/github.com/user/stringutil
    2 $ vim reverse.go

        // Package stringutil contains utility functions for working with strings.
        package stringutil
        
        // Reverse returns its argument string reversed rune-wise left to right.
        func Reverse(s string) string {
            r := []rune(s)
            for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {
                r[i], r[j] = r[j], r[i]
            }
            return string(r)
        }

    3 go build github.com/user/stringutil

      or

      if you're working in the package's source directory, just:

      $ go build

    4 $ vim $GOPATH/src/github.com/user/hello/hello.go

      package main
  
      import (
          "fmt"
          "github.com/user/stringutil"
      )
      
      func main() {
          fmt.Printf(stringutil.Reverse("!oG ,olleH"))
      }
    
    5 $ go install github.com/user/hello
      $ hello

    6 your workspace should look like this:

      bin/
          hello                 # command executable
      pkg/
          linux_amd64/          # this will reflect your OS and architecture
              github.com/user/
                  stringutil.a  # package object
      src/
          github.com/user/
              hello/
                  hello.go      # command source
              stringutil/
              reverse.go    # package source

      note that go install placed the stringutil.a object in a directory inside pkg/linux_amd64 that mirrors its source directory. this is so that future invocations of the go tool can find the package object and avoid recompiling the package unnecessarily. the linux_amd64 part is there to aid in cross-compilation, and will reflect the operating system and architecture of your system.

      Go cmd executables are statically linked; the package objects need not be present to run Go programs.